#!/usr/bin/env bash
#
# Copyright 2023 EnterpriseDB Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is used to create a GCP custom role and a service account with
# enough permissions in your GCP project for handling the BigAnimal managed
# service, and returning its credentials in a "ba-passport.json".
#
# What it does:
#   - assume you have an gcloud profile configured to work with the gcloud CLI
#   - configured your gcloud profile to work with the selected project
#   - create a few GCP custom roles following the PoLP (Principle of Least Privilege)
#   - create an GCP service account attaching the previously created custom role
#   - create an GCP service account key for the previously created service account
#   - write the service account credentials into a local file named "ba-passport.json"
#
# it finally outputs the:
#   - GCP custom roles IDs
#   - GCP service account ID
#   - GCP project ID where those resources have been created
# The "ba-passport.json" file content will be used later on with the BigAnimal CLI
# to connect your GCP project to your BigAnimal cloud project.
#
# For more details, please refer to
#  https://www.enterprisedb.com/docs/edbcloud/latest/getting_started/02_connect_cloud_account
#
set -e
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
[ "${BASH_VERSINFO:-0}" -lt 4 ] && echo -e "${RED}This script does not support Bash version 3 and below!${NC}" && show_help && exit 1
CURRENT_PATH=$(pwd)

# Default values for resources naming
suffix_sa_name="sa"
suffix_role_name="role"
project=""
custom_role_id="BigAnimal Role"
service_account_id=""

TMPDIR=$(mktemp -d)
function cleanup {
  rm -rf "${TMPDIR}"
}
trap cleanup EXIT
pushd "${TMPDIR}" >/dev/null || exit

show_help()
{
  echo "Required permissions:"
  echo "  roles/iam.serviceAccountCreator"
  echo "  roles/iam.serviceAccountKeyAdmin"
  echo "  roles/iam.roleAdmin"
  echo "  roles/resourcemanager.projectIamAdmin"
  echo "  or equivalents like"
  echo "  roles/owner"
  echo "Required tools:"
  echo "  jq, base64"
  echo "Usage:"
  echo -e "  ${GREEN}$0 -p GCP_PROJECT_ID [options]${NC}"
  echo ""
  echo "Options:"
  echo "  -p, --project:            Your GCP project ID that will be used by BigAnimal."
  echo "  -s, --sa-name-suffix:     [Optional] The suffix part in the name of the service account (default service account name is 'biganimal-sa')."
  echo "  -r, --role-name-suffix:   [Optional] The suffix part in the name of the custom role (default role name is 'biganimal_role')."
  echo "  -h, --help:               [Optional] Show this help."
  echo ""
  echo "Examples:"
  echo "    $0 -p my-sample-project-191923"
  echo "    $0 -p my-sample-project-191923 -s \"my-sa-suffix\" -r \"my_role_suffix\""
  echo "    this will create one service account named 'biganimal-my-sa-suffix' and a custom role named 'biganimal_my_role_suffix'"
  echo "    plus multiple custom roles for BigAnimal services all having the biganimal prefix"
  echo ""
  echo -e "${GREEN}Note: GCP service account names can't contain underscores (_) while custom role names can't contains dashes (-)${NC}"
  echo ""
}

check()
{
  #### Check gcloud CLI version
  check_gcloud_version
  # jq is required.
  #### Check gcloud auth
    gcloud_auth_list=$(gcloud auth list --format json | jq -r '.[] | select(.status=="ACTIVE").account | length')
    if [ "$gcloud_auth_list" -eq 0 ]; then
      show_help
      echo -e "${RED}Error: no GCP account ACTIVE in gcloud CLI${NC}"
      echo -e "${RED}Please run 'gcloud auth login' to login to your GCP account${NC}"
      exit 1
    fi
    #### Check gcloud account set
    gcloud_account_set=$(gcloud config configurations list --format json | jq -r '.[] | select(.is_active==true).properties.core.account | length')
    if [ "$gcloud_account_set" -eq 0 ]; then
      show_help
      echo -e "${RED}Error: no GCP account set in gcloud CLI${NC}"
      echo -e "${RED}Please run 'gcloud config set account YOUR_GCP_EMAIL_ACCOUNT' to set the GCP account${NC}"
      exit 1
    fi
  hash jq > /dev/null 2>&1 || { show_help; echo -e "${RED}Error: please install jq on the system${NC}"; }
  # base64 is required.
  hash base64 > /dev/null 2>&1 || { show_help; echo -e "${RED}Error: please install base64 on the system${NC}"; }
  check_project
  check_names
}

version() { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

check_gcloud_version()
{
  fullcliversion=$(gcloud --version)
  cliversionstripped=${fullcliversion%%$'\n'*}
  cliversion=${cliversionstripped##* }
  if [[ "$GOOGLE_CLOUD_SHELL" == "true" ]]; then
    echo -e "${GREEN}Run GCP CSP setup with gcloud cli ${cliversion} in GCP CloudShell${NC}"
  else
    [ "$(version "$cliversion")" -lt "$(version "428.0.0")" ] && echo -e "${RED}Error: upgrade gcloud cli to 428.0.0 or later${NC}" && exit 1
    echo -e "${GREEN}Run GCP CSP setup with gcloud cli ${cliversion}${NC}"
  fi
}

check_project()
{
  if [[ "${project}" == "" ]]; then
    echo -e "${RED}Error: missing -p, --project to specify the GCP project ID${NC}"
    show_help
    exit 1
  fi
  # check that the gcloud cli is configured to work with the given project and we have access to
  set +e
  current_project=$(gcloud config get-value project)
  if [ $? -ne 0 ]; then
    echo -e "${RED}Error while checking GCP credentials/profile configuration, please init/configure your gcloud CLI session/profile${NC}"
    show_help
    exit 1
  fi
  set -e
  if [[ ! "${current_project}" == "$project" ]]; then
    echo -e "${RED}Error: gcloud CLI not configured to work with the requested project $project!${NC}"
    echo -e "${RED}The configured project ID is ${current_project}!${NC}"
    show_help
    exit 1
  fi
}

check_names()
{
  if [[ "${suffix_sa_name}" =~ [_] ]]; then
    echo -e "${RED}Error: -s, --sa-name-suffix value can't contains underscores (_)${NC}"
    show_help
    exit 1
  fi
  if [[ "${suffix_role_name}" =~ [-] ]]; then
    echo -e "${RED}Error: -r, --role-name-suffix value can't contains dashes (-)${NC}"
    show_help
    exit 1
  fi
}

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      show_help
      exit 0
      ;;
    -p|--project)
      project="$2"
      shift 2
      ;;
    -s|--sa-name-suffix)
      suffix_sa_name="$2"
      shift 2
      ;;
    -r|--role-name-suffix)
      suffix_role_name="$2"
      shift 2
      ;;
    *)
      shift
      ;;
  esac
done

download_dependencies()
{
  # a shell func to download all the dependencies of this script before starting to execute
  # Download the latest biganimal roles templates or overwrite it
  TEMPLATE_FILES=(
    biganimal_GCP_baserole.yaml
    biganimal_GCP_npo.yaml
    biganimal_GCP_infra.yaml
    biganimal_GCP_telemetry.yaml
    biganimal_GCP_kubecost.yaml
    biganimal_GCP_blm.yaml
    biganimal_GCP_cspmetrics.yaml
    biganimal_GCP_bm.yaml
  )
  for template_file in "${TEMPLATE_FILES[@]}"; do
    download_template_file "${template_file}"
  done
}

download_template_file()
{
  curl -s https://raw.githubusercontent.com/EnterpriseDB/cloud-utilities/main/gcp/"${1}" -o "${CURRENT_PATH}"/"${1}"
  if [[ -s "${CURRENT_PATH}/${1}" ]]; then
    echo "Downloaded ${CURRENT_PATH}/${1}"
  else
    echo "Error: failed to download ${CURRENT_PATH}/${1}"
    exit 1
  fi
}

create_iam_custom_role()
{
  # verify if a custom role with the same name is already existing
  role_exists=$(gcloud iam roles list --project "$project" \
    --filter "name:biganimal_${suffix_role_name}" --format json | jq '. | length')
  if [ "$role_exists" -gt 0 ]; then
    # a custom role with the same name already exists
    echo -e "Updating GCP custom role ${GREEN}biganimal_${suffix_role_name}${NC} within GCP project ${GREEN}${project}${NC}..."

    # updating the GCP custom role
    custom_role_id=$(gcloud iam roles list --project "$project" \
      --filter "name:biganimal_${suffix_role_name}" --format json | jq -r '.[].name')

    gcloud iam roles update "${custom_role_id##*/}" --project "$project" \
      --file "${CURRENT_PATH}/biganimal_GCP_baserole.yaml" --quiet \
      --format json > "${TMPDIR}/biganimal_role_${suffix_role_name}_update_output.json"
  else
    # creating the GCP custom role
    echo -e "Creating GCP custom role ${GREEN}biganimal_${suffix_role_name}${NC} within GCP project ${GREEN}${project}${NC}..."
    gcloud iam roles create "biganimal_${suffix_role_name}" --project "$project" \
      --file "${CURRENT_PATH}/biganimal_GCP_baserole.yaml" --quiet \
      --format json > "${TMPDIR}/biganimal_role_${suffix_role_name}_create_output.json"
    custom_role_id=$(gcloud iam roles list --project "$project" \
      --filter "name:biganimal_${suffix_role_name}" --format json | jq -r '.[].name')
  fi
}

OPERATORS_CUSTOM_ROLE=(
  npo
  infra
  telemetry
  kubecost
  blm
  cspmetrics
  bm
)

create_operators_iam_custom_role()
{
  for role in "${OPERATORS_CUSTOM_ROLE[@]}"; do
    # verify if a custom role with the same name is already existing
    role_exists=$(gcloud iam roles list --project "$project" \
      --filter "name:biganimal_${role}" --format json | jq '. | length')
    if [ "$role_exists" -gt 0 ]; then
      # a custom role with the same name already exists
      echo -e "Updating GCP ${GREEN}biganimal_${role}${NC} custom role within GCP project ${GREEN}${project}${NC}..."

      # updating the operator GCP custom role
      operator_custom_role_id=$(gcloud iam roles list --project "$project" \
        --filter "name:biganimal_${role}" --format json | jq -r '.[].name')

      gcloud iam roles update "${operator_custom_role_id##*/}" --project "$project" \
        --file "${CURRENT_PATH}/biganimal_GCP_${role}.yaml" --quiet \
        --format json > "${TMPDIR}/biganimal_GCP_${role}_update_output.json"
    else
      # creating the operator GCP custom role
      echo -e "Creating GCP ${GREEN}biganimal_${role}${NC} custom role within GCP project ${GREEN}${project}${NC}..."
      gcloud iam roles create "biganimal_${role}" --project "$project" \
        --file "${CURRENT_PATH}/biganimal_GCP_${role}.yaml" --quiet \
        --format json > "${TMPDIR}/biganimal_GCP_${role}_create_output.json"
    fi
  done
}

create_service_account()
{
  # verifying if a GCP service account with the same name is already existing
  sa_exists=$(gcloud iam service-accounts list --project "$project" \
    --filter "name:biganimal-${suffix_sa_name}" --format json | jq '. | length')
  if [ "$sa_exists" -eq 0 ]; then
    # the service account does not exists, going to create it
    echo -e "Creating GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} within GCP project ${GREEN}${project}${NC}..."
    gcloud iam service-accounts create "biganimal-${suffix_sa_name}" --project "$project" \
      --display-name "biganimal-${suffix_sa_name}" --description "BigAnimal Service Account" \
      --format json > "${TMPDIR}"/biganimal_createserviceaccount_output.json
  else
    # the service account already exists, going to use it
    echo -e "GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} already exists within GCP project ${GREEN}${project}${NC}..."
  fi
  service_account_id=$(gcloud iam service-accounts list --project "$project" \
    --filter "name:biganimal-${suffix_sa_name}" --format json | jq -r '.[].email')

  # assigning the custom BigAnimal Role to the service account for the given GCP project
  echo -e "Allowing GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} to use the GCP project ${GREEN}${project}${NC}..."
  gcloud projects add-iam-policy-binding "$project" \
    --member "serviceAccount:${service_account_id}" \
    --role "${custom_role_id}" --condition=None \
    --format json > "${TMPDIR}"/biganimal_projectiampolicybinding_output.json

  # checking if the service account is having a key
  sa_key_exists=$(gcloud iam service-accounts keys list --project "$project" \
    --iam-account "${service_account_id}" --managed-by user --format json | jq '. | length')
  if [ "$sa_key_exists" -lt 2 ]; then
    # the service account is either not having any key or having only one, going to create a new one
    echo -e "Creating a GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} key within the GCP project ${GREEN}${project}${NC}..."
    gcloud iam service-accounts keys create "${CURRENT_PATH}"/biganimal_serviceaccount_key.json \
      --iam-account "${service_account_id}" --format json > "${TMPDIR}"/biganimal_createsakey_output.json
  else
    # the service account is already having 2 or more keys, deleting the oldest one and creating a new one
    echo -e "The GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} already has a few keys within the GCP project ${GREEN}${project}${NC}!"
    echo -e "Deleting the oldest GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} key within the GCP project ${GREEN}${project}${NC}..."
    sa_oldest_key=$(gcloud iam service-accounts keys list --project "$project" \
      --iam-account "${service_account_id}" --managed-by user --format json | jq -r 'sort_by(.validAfterTime) | .[0].name')
    sa_oldest_key_id=${sa_oldest_key##*/}
    gcloud iam service-accounts keys delete "$sa_oldest_key_id" --iam-account "${service_account_id}" --quiet > "${TMPDIR}"/biganimal_deletesakey_output.json
    echo -e "Creating a GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC} key within the GCP project ${GREEN}${project}${NC}..."
    gcloud iam service-accounts keys create "${CURRENT_PATH}"/biganimal_serviceaccount_key.json \
      --iam-account "${service_account_id}" --format json > "${TMPDIR}"/biganimal_createsakey_output.json
  fi
  # getting the newest service account key id
  sa_key_id=$(gcloud iam service-accounts keys list --project "$project" \
    --iam-account "${service_account_id}" --managed-by user --format json | jq -r 'sort_by(.validAfterTime) | reverse | .[0].name')
  # getting the escaped JSON string of the key to be saved later into "ba-passport.json"
  sa_key=$(base64 -w0 < "${CURRENT_PATH}"/biganimal_serviceaccount_key.json)
}

save_result()
{
  echo ""
  echo "######################################################"
  echo -e "# Script Results running on GCP project ${GREEN}${project}${NC} #"
  echo "######################################################"
  echo ""
  echo -e "Created GCP custom role ${GREEN}biganimal_${suffix_role_name}${NC}"
  for role in "${OPERATORS_CUSTOM_ROLE[@]}"; do
    echo -e "Created GCP custom role ${GREEN}biganimal_${role}${NC}"
  done
  echo -e "Created GCP service account ${GREEN}biganimal-${suffix_sa_name}${NC}"
  echo -e "Created GCP service account key, ID is ${GREEN}${sa_key_id##*/}${NC}"
  # exporting JSON "ba-passport.json" that will be used by BigAnimal CLI
  echo "{\"gcpProject\":\"${project}\", \"roleName\":\"biganimal_${suffix_role_name}\", \"serviceAccountName\":\"biganimal-${suffix_sa_name}@${project}.iam.gserviceaccount.com\",\"serviceAccountKey\":\"${sa_key}\"}" > "$CURRENT_PATH"/ba-passport.json
}

check
download_dependencies
create_iam_custom_role
create_operators_iam_custom_role
create_service_account
save_result
